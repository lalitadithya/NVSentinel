# Copyright (c) 2025, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# =============================================================================
# NVSentinel Release Testing with Tilt
# =============================================================================
# This Tiltfile deploys published NVSentinel Helm charts from ghcr.io
# for testing released versions instead of building from source.
#
# QUICK START:
#   1. Set required environment variable:
#      export NVSENTINEL_VERSION=v0.0.3
#   2. Run Tilt (from root directory):
#      tilt up -f tilt/release/Tiltfile.release
#   3. Access Prometheus at http://localhost:9090
#
# ENVIRONMENT VARIABLES:
#   NVSENTINEL_VERSION (required) - Chart version to deploy (e.g., v0.0.3)
#   NVSENTINEL_VALUES (optional)  - Custom values file path
#   NUM_GPU_NODES (optional)      - Number of fake GPU nodes (default: 50)
#
# WHAT THIS DEPLOYS:
#   - cert-manager (for TLS certificates)
#   - prometheus-operator (for monitoring)
#   - kwok (fake Kubernetes nodes for testing)
#   - 50 fake GPU nodes with NVIDIA drivers/DCGM
#   - NVSentinel stack from published OCI chart
#
# REQUIREMENTS:
#   - Kubernetes cluster with Tilt installed
#   - Sufficient resources for ~115 pods
# =============================================================================

load('ext://helm_resource', 'helm_resource', 'helm_repo')
load('ext://namespace', 'namespace_create', 'namespace_inject')

# Compute base directory relative to where Tilt was started
# This allows the Tiltfile to work when run from any directory
tilt_file_dir = os.path.dirname(config.main_path)
base_dir = os.path.join(tilt_file_dir, '..', '..')

# =============================================================================
# Environment Variable Validation (Fail Fast)
# =============================================================================

# Get chart version from environment variable - required
chart_version = os.getenv('NVSENTINEL_VERSION')
if not chart_version:
    fail('NVSENTINEL_VERSION environment variable is required')
print('Using NVSentinel chart version: ' + chart_version)

# Configure values file for deployment
values_file = os.getenv('NVSENTINEL_VALUES', os.path.join(base_dir, './tilt/release/values-release.yaml'))

# Validate that explicitly specified values file exists
if not os.path.exists(values_file):
    fail('NVSENTINEL_VALUES specified but file does not exist: ' + values_file)

# Configure number of fake GPU nodes for testing
num_gpu_nodes = int(os.getenv('NUM_GPU_NODES', '50'))

# Increase timeout for cert-manager certificate generation and MongoDB startup
update_settings(k8s_upsert_timeout_secs=900)

# =============================================================================
# Infrastructure Components (Required Dependencies)
# =============================================================================

# Deploy cert-manager for TLS certificate management
# Required by NVSentinel for MongoDB client certificates
helm_repo('jetstack', 'https://charts.jetstack.io')
helm_resource(
    'cert-manager',
    chart='jetstack/cert-manager',
    namespace='cert-manager',
    flags=[
        '--create-namespace',
        '--set=installCRDs=true',
    ],
)

# Deploy Prometheus operator for metrics collection
# Provides monitoring infrastructure for NVSentinel components
helm_repo('prometheus-community', 'https://prometheus-community.github.io/helm-charts')
helm_resource(
    'prometheus-operator',
    chart='prometheus-community/kube-prometheus-stack',
    namespace='monitoring',
    flags=[
        '--create-namespace',
        '--set=prometheus.enabled=true',
        '--set=alertmanager.enabled=false',  # Not needed for testing
        '--set=grafana.enabled=false',       # Not needed for testing
        '--set=kubeStateMetrics.enabled=false',
        '--set=nodeExporter.enabled=false',
        '--set=prometheusOperator.enabled=true',
    ],
)

# Deploy KWOK for simulating GPU nodes without real hardware
# Creates fake Kubernetes nodes that appear as real GPU workers
helm_repo('sigs-kwok', 'https://kwok.sigs.k8s.io/charts/')
helm_resource(
    'kwok',
    chart='sigs-kwok/kwok',
    namespace='kube-system',
    flags=[
        '--set=hostNetwork=true'  # Required for proper node simulation
    ]
)
helm_resource(
    'kwok-stage-fast',
    chart='sigs-kwok/stage-fast',
    resource_deps=['kwok'],
    pod_readiness='ignore'  # Stage pods don't need readiness checks
)

# =============================================================================
# Namespace and Fake GPU Node Setup
# =============================================================================

# Create required namespaces
namespace_create('gpu-operator')  # For GPU operator components
namespace_create('nvsentinel')   # For NVSentinel components

# Create fake GPU nodes using KWOK
# These simulate real GPU worker nodes without requiring actual hardware
kwok_node_template = str(read_file(os.path.join(base_dir, 'tilt', 'kwok-node-template.yaml')))
for i in range(num_gpu_nodes):
    node_yaml = kwok_node_template.replace('PLACEHOLDER', str(i))
    k8s_yaml(blob(node_yaml))

# Deploy fake NVIDIA drivers and DCGM on simulated nodes
# These DaemonSets run on fake nodes to simulate GPU operator environment
k8s_yaml(os.path.join(base_dir, 'tilt', 'nvidia-driver-daemonset.yaml'))   # Simulates NVIDIA drivers
k8s_yaml(os.path.join(base_dir, 'tilt', 'nvidia-dcgm-daemonset.yaml'))     # Simulates DCGM monitoring

# =============================================================================
# NVSentinel Deployment from Published Chart
# =============================================================================

# Prepare values file for deployment
values_files = []
if os.path.exists(values_file):
    values_files = [values_file]
    print('Using values file: ' + values_file)
else:
    print('No custom values file found, using chart defaults')

# Deploy NVSentinel from published OCI chart
# This pulls the chart from ghcr.io/nvidia/nvsentinel instead of building locally
helm_resource(
    'nvsentinel',
    chart='oci://ghcr.io/nvidia/nvsentinel',
    namespace='nvsentinel',
    flags=[
        '--version=' + chart_version,
        '--create-namespace',
        '--timeout=15m',  # MongoDB startup can take time
        '--wait',         # Wait for all pods to be ready
        '--wait-for-jobs', # Wait for database initialization jobs
    ] + (['--values=' + values_file] if values_files else []),
    resource_deps=['cert-manager'],  # Certificates must exist before MongoDB starts
)

# =============================================================================
# Resource Configuration and Port Forwarding
# =============================================================================

# Configure Prometheus with port forwarding for easy access
# Access Prometheus UI at http://localhost:9090 to view NVSentinel metrics
k8s_resource(
    'prometheus-operator',
    port_forwards='9090:9090',
)

# Group fake GPU nodes for better organization in Tilt UI
kwok_node_names = ['kwok-node-' + str(i) + ':node' for i in range(num_gpu_nodes)]
k8s_resource(
    new_name='kwok-fake-nodes',
    objects=kwok_node_names,
    resource_deps=['kwok'],  # Wait for KWOK controller to be ready
)

# Configure KWOK stage controller (manages fake node lifecycle)
k8s_resource(
    'kwok-stage-fast',
    pod_readiness='ignore',  # Stage pods simulate node states, don't need readiness
    resource_deps=['kwok']
)

# =============================================================================
# Test Client (Optional)
# =============================================================================

# Include simple health client for generating test events
# This creates a client that sends health events to test the NVSentinel pipeline
include(os.path.join(base_dir, 'tilt', 'simple-health-client', 'Tiltfile'))
