# Copyright (c) 2025, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# =============================================================================
# NVSentinel Release Testing Configuration
# =============================================================================
# This values file is optimized for testing published NVSentinel charts
# in a simulated environment with fake GPU nodes created by KWOK.
#
# KEY FEATURES:
# - Enables all NVSentinel components for comprehensive testing
# - Configures proper node scheduling to separate real vs fake nodes
# - Sets up tolerations for testing with tainted fake GPU nodes
# - Installs MongoDB for data persistence
#
# USAGE:
#   This file is automatically used by tilt/release/Tiltfile.release
#   You can override it with: NVSENTINEL_VALUES=./custom-values.yaml
# =============================================================================

# =============================================================================
# Component Configuration
# =============================================================================
# Enable/disable individual NVSentinel components for testing

global:
  # GPU Health Monitoring - monitors GPU health via DCGM
  gpuHealthMonitor:
    enabled: true

  # Syslog Health Monitoring - monitors system logs for GPU errors
  syslogHealthMonitor:
    enabled: true

  # Fault Quarantine - isolates nodes with detected faults
  faultQuarantineModule:
    enabled: true

  # Node Drainer - safely drains workloads from faulty nodes
  nodeDrainerModule:
    enabled: true

  # Fault Remediation - attempts to fix detected issues
  faultRemediationModule:
    enabled: true

  # Health Events Analyzer - processes and analyzes health events
  healthEventsAnalyzer:
    enabled: true

  # Cloud Service Provider Health Monitor - monitors cloud provider events
  # Disabled for local testing as it requires cloud provider integration
  cspHealthMonitor:
    enabled: false

  # Labeler - applies labels to nodes based on health status
  labeler:
    enabled: true

  # Janitor - performs remediation action
  janitor:
    enabled: true

  # Install MongoDB for data persistence
  # Required for health event storage and processing
  installMongoDB: true

# =============================================================================
# Platform Connector Configuration
# =============================================================================
# Central component that receives health events from monitors

platformConnector:
  # Increase log verbosity for better debugging during testing
  logVerbosity: 2
  # Enable MongoDB storage backend for health events
  mongodbStore:
    enabled: true

# =============================================================================
# Health Monitor Scheduling Configuration
# =============================================================================
# Health monitors can run on fake GPU nodes since they only collect metrics

# GPU Health Monitor - tolerates all taints to run on fake GPU nodes
gpu-health-monitor:
  tolerations:
  - operator: Exists  # Run on any node regardless of taints

# Syslog Health Monitor - tolerates all taints to run on fake GPU nodes
syslog-health-monitor:
  tolerations:
  - operator: Exists  # Run on any node regardless of taints

# CSP Health Monitor - tolerates all taints (when enabled)
csp-health-monitor:
  tolerations:
  - operator: Exists  # Run on any node regardless of taints

# =============================================================================
# Fault Module Scheduling Configuration
# =============================================================================
# CRITICAL: Fault modules must run on real nodes, not fake KWOK nodes
# These modules perform actual node operations (quarantine, drain, remediation)
# that require real Kubernetes node management capabilities

# Fault Quarantine Module - isolates faulty nodes
fault-quarantine:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          # Avoid KWOK fake nodes (they can't perform real node operations)
          - key: type
            operator: NotIn
            values: ["kwok"]
          # Avoid control plane nodes (not suitable for fault modules)
          - key: node-role.kubernetes.io/control-plane
            operator: DoesNotExist
  tolerations:
  - operator: Exists  # Tolerate any taints on real worker nodes

# Fault Remediation Module - attempts to fix detected faults
fault-remediation:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          # Avoid KWOK fake nodes (they can't perform real remediation)
          - key: type
            operator: NotIn
            values: ["kwok"]
          # Avoid control plane nodes
          - key: node-role.kubernetes.io/control-plane
            operator: DoesNotExist
  tolerations:
  - operator: Exists  # Tolerate any taints on real worker nodes

# Node Drainer Module - safely drains workloads from faulty nodes
node-drainer:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          # Avoid KWOK fake nodes (they can't perform real node draining)
          - key: type
            operator: NotIn
            values: ["kwok"]
          # Avoid control plane nodes
          - key: node-role.kubernetes.io/control-plane
            operator: DoesNotExist
  tolerations:
  - operator: Exists  # Tolerate any taints on real worker nodes

# =============================================================================
# Labeler Configuration
# =============================================================================
# Node labeling service that applies health status labels

labeler:
  serviceAccount:
    create: true
    name: ""  # Let Helm generate unique name to avoid conflicts
