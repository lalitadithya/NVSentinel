# Copyright (c) 2025, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "fault-remediation-module.fullname" . }}
  labels:
    {{- include "fault-remediation-module.labels" . | nindent 4}}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "fault-remediation-module.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with ((.Values.global).podAnnotations | default .Values.podAnnotations) }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "fault-remediation-module.selectorLabels" . | nindent 8 }}
    spec:
      {{- with ((.Values.global).imagePullSecrets | default .Values.imagePullSecrets) }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "fault-remediation-module.serviceAccountName" . }}
      containers:
        - name: fault-remediation
          image: "{{ ((.Values.global).faultRemediationModule).image.repository | default "ghcr.io/nvidia/nvsentinel/fault-remediation-module" }}:{{ ((.Values.global).image).tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ ((.Values.global).faultRemediationModule).image.pullPolicy | default "IfNotPresent" }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          args:
          - "--dry-run={{ ((.Values.global).dryRun) | default false }}"
          - "--enable-log-collector={{ .Values.logCollector.enabled }}"
          ports:
            - name: metrics
              containerPort: {{ ((.Values.global).metricsPort) | default 2112 }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: metrics
            initialDelaySeconds: 15
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /healthz
              port: metrics
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3
          volumeMounts:
          - name: mongo-app-client-cert
            mountPath: {{ .Values.clientCertMountPath }}
            readOnly: true
          - name: templates
            mountPath: {{ .Values.maintenanceResource.template.mountPath }}
          - name: config-volume
            mountPath: /etc/config/config.toml
            subPath: config.toml
          env:
          - name: LOG_LEVEL
            value: "{{ .Values.logLevel }}"
          - name: LOG_COLLECTOR_MANIFEST_PATH
            value: {{ .Values.maintenanceResource.template.mountPath }}/{{ .Values.logCollector.manifestFileName }}
          - name: ENABLE_GCP_SOS_COLLECTION
            value: "{{ .Values.logCollector.enableGcpSosCollection }}"
          - name: ENABLE_AWS_SOS_COLLECTION
            value: "{{ .Values.logCollector.enableAwsSosCollection }}"
          - name: MONGODB_CLIENT_CERT_PATH
            value: "{{ .Values.clientCertMountPath }}/tls.crt"
          - name: MONGODB_CLIENT_KEY_PATH
            value: "{{ .Values.clientCertMountPath }}/tls.key"
          - name: MONGODB_CA_CERT_PATH
            value: "{{ .Values.clientCertMountPath }}/ca.crt"
          envFrom:
            - configMapRef:
                name: mongodb-config
                optional: true
      volumes:
      - name: mongo-app-client-cert
        secret:
          secretName: mongo-app-client-cert-secret
          optional: true
      - name: config-volume
        configMap:
          name: fault-remediation-config
          items:
          - key: config.toml
            path: config.toml
      - name: templates
        configMap:
          name: fault-remediation-templates
          items:
            - key: {{ .Values.maintenanceResource.template.fileName }}
              path: {{ .Values.maintenanceResource.template.fileName }}
            {{- if .Values.logCollector.enabled }}
            - key: {{ .Values.logCollector.manifestFileName }}
              path: {{ .Values.logCollector.manifestFileName }}
            {{- end }}
      restartPolicy: Always
      {{- with (((.Values.global).systemNodeSelector) | default .Values.nodeSelector) }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with (((.Values.global).affinity) | default .Values.affinity) }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with (((.Values.global).systemNodeTolerations) | default .Values.tolerations) }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
