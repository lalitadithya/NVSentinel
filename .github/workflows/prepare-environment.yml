# Copyright (c) 2025, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Prepare Environment

on:
  workflow_call:
    outputs:
      # Tool versions outputs
      go_version:
        description: 'Go version'
        value: ${{ jobs.load-versions.outputs.go_version }}
      python_version:
        description: 'Python version'
        value: ${{ jobs.load-versions.outputs.python_version }}
      poetry_version:
        description: 'Poetry version'
        value: ${{ jobs.load-versions.outputs.poetry_version }}
      golangci_lint_version:
        description: 'golangci-lint version'
        value: ${{ jobs.load-versions.outputs.golangci_lint_version }}
      protobuf_version:
        description: 'Protocol Buffers version'
        value: ${{ jobs.load-versions.outputs.protobuf_version }}
      protoc_gen_go_version:
        description: 'protoc-gen-go version'
        value: ${{ jobs.load-versions.outputs.protoc_gen_go_version }}
      protoc_gen_go_grpc_version:
        description: 'protoc-gen-go-grpc version'
        value: ${{ jobs.load-versions.outputs.protoc_gen_go_grpc_version }}
      grpcio_tools_version:
        description: 'grpcio-tools version'
        value: ${{ jobs.load-versions.outputs.grpcio_tools_version }}
      black_version:
        description: 'black version'
        value: ${{ jobs.load-versions.outputs.black_version }}
      shellcheck_version:
        description: 'shellcheck version'
        value: ${{ jobs.load-versions.outputs.shellcheck_version }}

jobs:
  load-versions:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      go_version: ${{ steps.load-versions.outputs.go_version }}
      python_version: ${{ steps.load-versions.outputs.python_version }}
      poetry_version: ${{ steps.load-versions.outputs.poetry_version }}
      golangci_lint_version: ${{ steps.load-versions.outputs.golangci_lint_version }}
      protobuf_version: ${{ steps.load-versions.outputs.protobuf_version }}
      protoc_gen_go_version: ${{ steps.load-versions.outputs.protoc_gen_go_version }}
      protoc_gen_go_grpc_version: ${{ steps.load-versions.outputs.protoc_gen_go_grpc_version }}
      grpcio_tools_version: ${{ steps.load-versions.outputs.grpcio_tools_version }}
      black_version: ${{ steps.load-versions.outputs.black_version }}
      shellcheck_version: ${{ steps.load-versions.outputs.shellcheck_version }}
    steps:
      - uses: actions/checkout@v4

      - name: Load tool versions from .versions.yaml
        id: load-versions
        run: |
          # Install yq for YAML parsing
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          
          # Load versions from .versions.yaml
          echo "go_version=$(yq '.languages.go' .versions.yaml)" >> $GITHUB_OUTPUT
          echo "python_version=$(yq '.languages.python' .versions.yaml)" >> $GITHUB_OUTPUT
          echo "poetry_version=$(yq '.build_tools.poetry' .versions.yaml)" >> $GITHUB_OUTPUT
          echo "golangci_lint_version=$(yq '.go_tools.golangci_lint' .versions.yaml)" >> $GITHUB_OUTPUT
          echo "protobuf_version=$(yq '.protobuf.protobuf' .versions.yaml)" >> $GITHUB_OUTPUT
          echo "protoc_gen_go_version=$(yq '.protobuf.protoc_gen_go' .versions.yaml)" >> $GITHUB_OUTPUT
          echo "protoc_gen_go_grpc_version=$(yq '.protobuf.protoc_gen_go_grpc' .versions.yaml)" >> $GITHUB_OUTPUT
          echo "grpcio_tools_version=$(yq '.protobuf.grpcio_tools' .versions.yaml)" >> $GITHUB_OUTPUT
          echo "black_version=$(yq '.linting.black' .versions.yaml)" >> $GITHUB_OUTPUT
          echo "shellcheck_version=$(yq '.linting.shellcheck' .versions.yaml)" >> $GITHUB_OUTPUT
          
          echo "Loaded versions from .versions.yaml:"
          cat $GITHUB_OUTPUT
