# Copyright (c) 2025, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Setup CI Tools'
description: 'Install all CI tools matching ci.Dockerfile'

inputs:
  go-version:
    description: 'Go version to install'
    required: true
  python-version:
    description: 'Python version to install'
    required: true
  poetry-version:
    description: 'Poetry version to install'
    required: true
  golangci-lint-version:
    description: 'golangci-lint version to install'
    required: true
  protobuf-version:
    description: 'Protocol Buffers version to install'
    required: true
  protoc-gen-go-version:
    description: 'protoc-gen-go version to install'
    required: true
  protoc-gen-go-grpc-version:
    description: 'protoc-gen-go-grpc version to install'
    required: true
  grpcio-tools-version:
    description: 'grpcio-tools version to install'
    required: true
  black-version:
    description: 'black version to install'
    required: true
  shellcheck-version:
    description: 'shellcheck version to install'
    required: true
  install-dcgm:
    description: 'Whether to install DCGM (requires sudo, may fail in some environments)'
    required: false
    default: 'false'
  ko-version:
    description: 'Version of ko to install'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Install base dependencies
      shell: bash
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y -qq python3 python3-pip curl git wget unzip build-essential

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}
        cache: 'pip'

    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pypoetry
          ~/.cache/pip
        key: ${{ runner.os }}-poetry-${{ inputs.poetry-version }}-${{ hashFiles('**/poetry.lock', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-poetry-${{ inputs.poetry-version }}-
          ${{ runner.os }}-poetry-

    - name: Install Poetry
      shell: bash
      run: |
        pip install --break-system-packages poetry==${{ inputs.poetry-version }} || pip install poetry==${{ inputs.poetry-version }}

    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: 'latest'

    - name: Cache Helm plugins
      uses: actions/cache@v4
      with:
        path: ~/.local/share/helm/plugins
        key: ${{ runner.os }}-helm-plugins-${{ hashFiles('.github/actions/setup-ci-tools/action.yml') }}
        restore-keys: |
          ${{ runner.os }}-helm-plugins-

    - name: Install Helm Push plugin
      shell: bash
      run: |
        helm plugin install https://github.com/chartmuseum/helm-push || echo "Helm push plugin may already be installed"

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go-version }}
        cache: true
        cache-dependency-path: |
          **/go.sum
          **/go.mod

    - name: Install Go tools
      shell: bash
      run: |
        go install github.com/boumenot/gocover-cobertura@latest
        go install gotest.tools/gotestsum@latest
        curl -fsSL --retry 3 --keepalive-time 2 https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin ${{ inputs.golangci-lint-version }}

    - name: Cache Protocol Buffers
      uses: actions/cache@v4
      with:
        path: |
          /usr/local/bin/protoc
          /usr/local/include/google
        key: ${{ runner.os }}-protoc-${{ inputs.protobuf-version }}
        restore-keys: |
          ${{ runner.os }}-protoc-

    - name: Install Protocol Buffers
      shell: bash
      run: |
        # Check if protoc is already cached
        if command -v protoc &> /dev/null && protoc --version | grep -q "${{ inputs.protobuf-version }}"; then
          echo "Protocol Buffers already installed from cache"
        else
          echo "Installing Protocol Buffers ${{ inputs.protobuf-version }}"
          PROTOBUF_VERSION="${{ inputs.protobuf-version }}"
          PROTOBUF_VERSION_NO_V="${PROTOBUF_VERSION#v}"
          ARCH=$(case $(uname -m) in x86_64) echo x86_64;; aarch64) echo aarch_64;; *) echo $(uname -m);; esac)
          wget -q https://github.com/protocolbuffers/protobuf/releases/download/${PROTOBUF_VERSION}/protoc-${PROTOBUF_VERSION_NO_V}-linux-${ARCH}.zip
          unzip protoc-${PROTOBUF_VERSION_NO_V}-linux-${ARCH}.zip -d protoc-${PROTOBUF_VERSION_NO_V}-linux-${ARCH}
          sudo cp protoc-${PROTOBUF_VERSION_NO_V}-linux-${ARCH}/bin/protoc /usr/local/bin/
          sudo mkdir -p /usr/local/include/google
          sudo cp -r protoc-${PROTOBUF_VERSION_NO_V}-linux-${ARCH}/include/google /usr/local/include/
          rm -rf protoc-${PROTOBUF_VERSION_NO_V}-linux-${ARCH}*
        fi
        go install google.golang.org/protobuf/cmd/protoc-gen-go@${{ inputs.protoc-gen-go-version }}
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@${{ inputs.protoc-gen-go-grpc-version }}
        pip install grpcio==${{ inputs.grpcio-tools-version }} grpcio-tools==${{ inputs.grpcio-tools-version }} black==${{ inputs.black-version }}

    - name: Install DCGM (optional)
      if: inputs.install-dcgm == 'true'
      shell: bash
      run: |
        ARCH=$(case $(uname -m) in x86_64) echo x86_64;; aarch64) echo arm64;; *) echo $(uname -m);; esac)
        wget -q https://developer.download.nvidia.com/compute/cuda/repos/debian12/${ARCH}/cuda-keyring_1.1-1_all.deb
        sudo dpkg -i cuda-keyring_1.1-1_all.deb
        rm cuda-keyring_1.1-1_all.deb
        sudo apt-get update -qq
        sudo apt-get install -y -qq datacenter-gpu-manager=1:3.3.5 || echo "DCGM installation failed (may require GPU/NVIDIA hardware)"
        sudo apt-get clean

    - name: Cache shellcheck
      uses: actions/cache@v4
      with:
        path: /usr/local/bin/shellcheck
        key: ${{ runner.os }}-shellcheck-${{ inputs.shellcheck-version }}
        restore-keys: |
          ${{ runner.os }}-shellcheck-

    - name: Install shellcheck
      shell: bash
      run: |
        # Check if shellcheck is already cached
        if command -v shellcheck &> /dev/null && shellcheck --version | grep -q "${{ inputs.shellcheck-version }}"; then
          echo "shellcheck already installed from cache"
        else
          echo "Installing shellcheck ${{ inputs.shellcheck-version }}"
          ARCH=$(case $(uname -m) in x86_64) echo x86_64;; aarch64) echo aarch64;; *) echo $(uname -m);; esac)
          curl -fsSL --retry 3 --keepalive-time 2 "https://github.com/koalaman/shellcheck/releases/download/${{ inputs.shellcheck-version }}/shellcheck-${{ inputs.shellcheck-version }}.linux.${ARCH}.tar.xz" | \
            sudo tar -xJ --wildcards -C /usr/local/bin/ --strip-components=1 "*/shellcheck"
          sudo chmod +x /usr/local/bin/shellcheck
        fi

    - name: Install additional Go tools
      shell: bash
      run: |
        go install github.com/google/addlicense@latest
        go install sigs.k8s.io/controller-runtime/tools/setup-envtest@latest
        go install golang.org/x/tools/cmd/goimports@latest
        go install github.com/google/go-containerregistry/cmd/crane@latest
        go install github.com/google/ko@${{ inputs.ko-version }}

    - name: Set environment variables
      shell: bash
      run: |
        echo "PYTHONPATH=/usr/local/dcgm/bindings/python3" >> $GITHUB_ENV
        echo "PYTHONUNBUFFERED=1" >> $GITHUB_ENV
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Verify installations
      shell: bash
      run: |
        echo "=== Verifying tool installations ==="
        echo "Python: $(python3 --version)"
        echo "Poetry: $(poetry --version)"
        echo "Helm: $(helm version --short)"
        echo "Go: $(go version)"
        echo "ko: $(ko version)"
        echo "golangci-lint: $(golangci-lint --version)"
        echo "gotestsum: $(gotestsum --version)"
        echo "protoc: $(protoc --version)"
        echo "shellcheck: $(shellcheck --version | head -n 2)"
        echo "addlicense: $(addlicense >/dev/null 2>&1 || echo 'installed')"
        echo "goimports: $(goimports --help >/dev/null 2>&1 || echo 'installed')"
        echo "black: $(black --version || echo 'not installed')"
        echo "==================================="
